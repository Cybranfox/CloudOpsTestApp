
You are an expert Python/Flask developer. Analyze this AWS learning app code and provide specific improvements:

APP.PY CONTENT:
from flask import Flask, render_template, jsonify, request, redirect, url_for
from flask_cors import CORS
from improved_data import get_lessons
from progress import load_progress, complete_lesson, register_quiz_result
import random

# Cloud Orbit - Slay the Spire Edition v5
# Enhanced with room mechanics, loot system, and mobile APK preparation

app = Flask(__name__)
CORS(app)  # Enable CORS for mobile app integration

@app.route('/')
def home():
    """
    Enhanced home page with Slay the Spire progression system
    """
    progress = load_progress()
    return render_template('index.html', progress=progress)

@app.route('/api/lessons')
def lessons_api():
    """API endpoint for mobile app integration"""
    return jsonify(get_lessons())

@app.route('/lessons')
def lessons():
    """Web version lessons list"""
    return jsonify(get_lessons())

@app.route('/lesson/<int:lesson_id>')
def lesson_page(lesson_id):
    """
    Enhanced lesson page with room mechanics
    """
    lessons_list = get_lessons()
    lesson = next((l for l in lessons_list if l['id'] == lesson_id), None)
    if lesson:
        progress = load_progress()
        return render_template('lesson.html', lesson=lesson, progress=progress)
    return "Lesson not found", 404

@app.route('/api/lesson/<int:lesson_id>')
def lesson_api(lesson_id):
    """API endpoint for lesson data (mobile)"""
    lessons_list = get_lessons()
    lesson = next((l for l in lessons_list if l['id'] == lesson_id), None)
    if lesson:
        progress = load_progress()
        return jsonify({
            'lesson': lesson,
            'progress': progress
        })
    return jsonify({'error': 'Lesson not found'}), 404

@app.route('/complete/<int:lesson_id>')
def complete(lesson_id):
    """
    Enhanced completion with loot rewards
    """
    progress = complete_lesson(lesson_id)
    lessons_list = get_lessons()
    lesson = next((l for l in lessons_list if l['id'] == lesson_id), None)

    # Award loot if lesson has it
    if lesson and 'loot' in lesson:
        progress = award_loot(progress, lesson['loot'])

    next_id = lesson_id + 1 if lesson_id < len(lessons_list) else 1
    return redirect(url_for('lesson_page', lesson_id=next_id))

@app.route('/api/complete/<int:lesson_id>', methods=['POST'])
def complete_api(lesson_id):
    """API endpoint for lesson completion (mobile)"""
    progress = complete_lesson(lesson_id)
    lessons_list = get_lessons()
    lesson = next((l for l in lessons_list if l['id'] == lesson_id), None)

    if lesson and 'loot' in lesson:
        progress = award_loot(progress, lesson['loot'])

    return jsonify({
        'success': True,
        'progress': progress,
        'loot_awarded': lesson.get('loot') if lesson else None
    })

@app.route('/quiz/<int:lesson_id>', methods=['GET', 'POST'])
def quiz(lesson_id):
    """
    Enhanced quiz with room battle mechanics
    """
    lessons_list = get_lessons()
    lesson = next((l for l in lessons_list if l['id'] == lesson_...

README CONTENT:
# AWS Orbit RPG Edition ‚Äì Implementation Plan

## Overview
This document outlines a LONG ASS roadmap to transform what has so far being an interesting experence, into an RPG‚Äëstyle learning experience, incorporating new animations, adaptive progression and minigame prototypes. The plan assumes an agile iteration cycle with daily deliverables and testing.

## Phase¬†1: Animation System Refactor
- Upgrade the mascot animation engine to support six states: correct, wrong, idle, sleepy, level‚Äëup, and boss encounter.
- Implement animation blending for smooth state transitions.
- Integrate sound effects for each state.
- Deliverable: `ZapCanvasAnimator` module with placeholder draw functions and state management.

## Phase¬†2: RPG Progression Backend
- Design the skill tree structure (see `skill_tree.py`) with dependencies between AWS domains.
- Implement health and mana mechanics tied to quiz performance and time.
- Expose API endpoints for retrieving skill tree status and updating player stat...

Please provide:
1. üêõ Bug fixes needed
2. ‚ö° Performance optimizations  
3. üöÄ Feature suggestions
4. üîí Security improvements
5. üì± Mobile UX enhancements
6. üé® UI/UX improvements

Format as GitHub issue content with actionable tasks.
